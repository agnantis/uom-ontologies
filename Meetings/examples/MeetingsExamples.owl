Prefix(:=<http://www.uom.gr/ai/ontologies/MeetingsExamples.owl#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(meetings:=<http://www.uom.gr/ai/ontologies/Meetings.owl#>)


Ontology(<http://www.uom.gr/ai/ontologies/MeetingsExamples.owl>
Import(<http://www.uom.gr/ai/ontologies/Meetings.owl>)
Import(<http://www.w3.org/2006/time>)

Declaration(Class(:Example))
Declaration(NamedIndividual(:Eleni))
Declaration(NamedIndividual(:John))
Declaration(NamedIndividual(:Kostas))
Declaration(NamedIndividual(:Marina))
Declaration(NamedIndividual(:Nick))
Declaration(NamedIndividual(:Vasilis))
Declaration(NamedIndividual(:Xanthi))
Declaration(NamedIndividual(:arrangedMeeting))
Declaration(NamedIndividual(:calEntry1))
Declaration(NamedIndividual(:calEntry2))
Declaration(NamedIndividual(:calEntry3))
Declaration(NamedIndividual(:calEntry4))
Declaration(NamedIndividual(:calEntry5))
Declaration(NamedIndividual(:combo_interval1))
Declaration(NamedIndividual(:date_description1))
Declaration(NamedIndividual(:date_description2))
Declaration(NamedIndividual(:date_interval))
Declaration(NamedIndividual(:day_description1))
Declaration(NamedIndividual(:day_description2))
Declaration(NamedIndividual(:day_description3))
Declaration(NamedIndividual(:day_description4))
Declaration(NamedIndividual(:day_interval1))
Declaration(NamedIndividual(:day_interval2))
Declaration(NamedIndividual(:endTime))
Declaration(NamedIndividual(:endWin))
Declaration(NamedIndividual(:inst0))
Declaration(NamedIndividual(:inst1))
Declaration(NamedIndividual(:inst2))
Declaration(NamedIndividual(:inst3))
Declaration(NamedIndividual(:inst4))
Declaration(NamedIndividual(:inst5))
Declaration(NamedIndividual(:maxDur))
Declaration(NamedIndividual(:minDur))
Declaration(NamedIndividual(:prefDur))
Declaration(NamedIndividual(:startTime))
Declaration(NamedIndividual(:startWin))
Declaration(NamedIndividual(:time_description1))
Declaration(NamedIndividual(:time_description2))
Declaration(NamedIndividual(:time_interval))
Declaration(NamedIndividual(:toBeArrangeMeeting))
Declaration(NamedIndividual(:tpOrganizer1))
Declaration(NamedIndividual(:userCalendar))
ClassAssertion(meetings:Participant :Eleni)
ClassAssertion(:Example :Eleni)
ClassAssertion(meetings:Participant :John)
ClassAssertion(:Example :John)
ObjectPropertyAssertion(meetings:hasPresenceType :John meetings:RequiredPresence)
ObjectPropertyAssertion(meetings:hasRole :John meetings:Organizer)
ClassAssertion(meetings:Participant :Kostas)
ClassAssertion(:Example :Kostas)
ClassAssertion(meetings:Participant :Marina)
ClassAssertion(:Example :Marina)
ObjectPropertyAssertion(meetings:hasPresenceType :Marina meetings:RequiredPresence)
ObjectPropertyAssertion(meetings:hasRole :Marina meetings:Member)
ClassAssertion(meetings:Participant :Nick)
ClassAssertion(:Example :Nick)
ObjectPropertyAssertion(meetings:hasPresenceType :Nick meetings:DesiredPresence)
ObjectPropertyAssertion(meetings:hasRole :Nick meetings:Guest)
ClassAssertion(meetings:Participant :Vasilis)
ClassAssertion(:Example :Vasilis)
ClassAssertion(meetings:Location :Xanthi)
ClassAssertion(:Example :Xanthi)
DataPropertyAssertion(meetings:name :Xanthi "Ξάνθη")
ClassAssertion(meetings:ArrangedMeeting :arrangedMeeting)
ClassAssertion(:Example :arrangedMeeting)
ObjectPropertyAssertion(meetings:hasEndTime :arrangedMeeting :endTime)
ObjectPropertyAssertion(meetings:hasLocation :arrangedMeeting :Xanthi)
ObjectPropertyAssertion(meetings:hasParticipant :arrangedMeeting :Kostas)
ObjectPropertyAssertion(meetings:hasParticipant :arrangedMeeting :Vasilis)
ObjectPropertyAssertion(meetings:hasParticipant :arrangedMeeting :Eleni)
ObjectPropertyAssertion(meetings:hasStartTime :arrangedMeeting :startTime)
DataPropertyAssertion(meetings:name :arrangedMeeting "School reunion")
ClassAssertion(meetings:CalendarEntry :calEntry1)
ClassAssertion(:Example :calEntry1)
ObjectPropertyAssertion(meetings:hasEndTime :calEntry1 :inst1)
ObjectPropertyAssertion(meetings:hasStartTime :calEntry1 :inst0)
ObjectPropertyAssertion(meetings:hasType :calEntry1 meetings:Available)
ClassAssertion(meetings:CalendarEntry :calEntry2)
ClassAssertion(:Example :calEntry2)
ObjectPropertyAssertion(meetings:hasEndTime :calEntry2 :inst2)
ObjectPropertyAssertion(meetings:hasMovabilityType :calEntry2 meetings:TotallyImmovable)
ObjectPropertyAssertion(meetings:hasStartTime :calEntry2 :inst1)
ObjectPropertyAssertion(meetings:hasType :calEntry2 meetings:Busy)
ClassAssertion(meetings:CalendarEntry :calEntry3)
ClassAssertion(:Example :calEntry3)
ObjectPropertyAssertion(meetings:hasEndTime :calEntry3 :inst3)
ObjectPropertyAssertion(meetings:hasStartTime :calEntry3 :inst2)
ObjectPropertyAssertion(meetings:hasType :calEntry3 meetings:Available)
ClassAssertion(meetings:CalendarEntry :calEntry4)
ClassAssertion(:Example :calEntry4)
ObjectPropertyAssertion(meetings:hasEndTime :calEntry4 :inst4)
ObjectPropertyAssertion(meetings:hasImportanceType :calEntry4 meetings:FairlyImportant)
ObjectPropertyAssertion(meetings:hasMovabilityType :calEntry4 meetings:FairlyMovable)
ObjectPropertyAssertion(meetings:hasStartTime :calEntry4 :inst3)
ObjectPropertyAssertion(meetings:hasType :calEntry4 meetings:ProbablyBusy)
ClassAssertion(meetings:CalendarEntry :calEntry5)
ClassAssertion(:Example :calEntry5)
ObjectPropertyAssertion(meetings:hasEndTime :calEntry5 :inst5)
ObjectPropertyAssertion(meetings:hasStartTime :calEntry5 :inst4)
ObjectPropertyAssertion(meetings:hasType :calEntry5 meetings:Available)
ClassAssertion(:Example :combo_interval1)
ObjectPropertyAssertion(meetings:consistsOf :combo_interval1 :time_interval)
ObjectPropertyAssertion(meetings:consistsOf :combo_interval1 :day_interval1)
ClassAssertion(meetings:DateDescription :date_description1)
ClassAssertion(:Example :date_description1)
DataPropertyAssertion(<http://www.w3.org/2006/time#day> :date_description1 "---23"^^xsd:gDay)
DataPropertyAssertion(<http://www.w3.org/2006/time#month> :date_description1 "--12"^^xsd:gMonth)
DataPropertyAssertion(<http://www.w3.org/2006/time#year> :date_description1 "2012"^^xsd:gYear)
ClassAssertion(meetings:DateDescription :date_description2)
ClassAssertion(:Example :date_description2)
DataPropertyAssertion(<http://www.w3.org/2006/time#day> :date_description2 "---03"^^xsd:gDay)
DataPropertyAssertion(<http://www.w3.org/2006/time#month> :date_description2 "--01"^^xsd:gMonth)
DataPropertyAssertion(<http://www.w3.org/2006/time#year> :date_description2 "2013"^^xsd:gYear)
AnnotationAssertion(rdfs:label :date_interval "Chrismas holidays"@en)
AnnotationAssertion(rdfs:comment :date_interval "A date interval example. Describes: Christmas holidays"@en)
AnnotationAssertion(rdfs:comment :date_interval "Ένα παράδειγμα διαστήματος ημερομηνιών. Περιγράφει: Διακοπές Χριστουγέννων"@el)
AnnotationAssertion(rdfs:label :date_interval "Διακοπές Χριστουγέννων"@el)
ClassAssertion(:Example :date_interval)
ObjectPropertyAssertion(meetings:endsAt :date_interval :date_description1)
ObjectPropertyAssertion(meetings:startsAt :date_interval :date_description2)
ClassAssertion(meetings:DayDescription :day_description1)
ClassAssertion(:Example :day_description1)
ObjectPropertyAssertion(<http://www.w3.org/2006/time#dayOfWeek> :day_description1 <http://www.w3.org/2006/time#Saturday>)
ClassAssertion(meetings:DayDescription :day_description2)
ClassAssertion(:Example :day_description2)
ObjectPropertyAssertion(<http://www.w3.org/2006/time#dayOfWeek> :day_description2 <http://www.w3.org/2006/time#Sunday>)
ClassAssertion(meetings:DayDescription :day_description3)
ClassAssertion(:Example :day_description3)
ObjectPropertyAssertion(<http://www.w3.org/2006/time#dayOfWeek> :day_description3 <http://www.w3.org/2006/time#Monday>)
ClassAssertion(meetings:DayDescription :day_description4)
ClassAssertion(:Example :day_description4)
ObjectPropertyAssertion(<http://www.w3.org/2006/time#dayOfWeek> :day_description4 <http://www.w3.org/2006/time#Tuesday>)
AnnotationAssertion(rdfs:label :day_interval1 "Σαββατοκύριακο"@el)
AnnotationAssertion(rdfs:label :day_interval1 "A day interval example. Describes: a weekend"@en)
AnnotationAssertion(rdfs:label :day_interval1 "Weekend"@en)
AnnotationAssertion(rdfs:comment :day_interval1 "Ένα παράδειγμα διαστήματος ημερών. Περιγράφει: ένα Σαββατοκύριακο"@el)
ClassAssertion(:Example :day_interval1)
ObjectPropertyAssertion(meetings:endsAt :day_interval1 :day_description2)
ObjectPropertyAssertion(meetings:startsAt :day_interval1 :day_description1)
ClassAssertion(meetings:DayInterval :day_interval2)
ClassAssertion(:Example :day_interval2)
ObjectPropertyAssertion(meetings:endsAt :day_interval2 <http://www.w3.org/2006/time#Tuesday>)
ObjectPropertyAssertion(meetings:startsAt :day_interval2 <http://www.w3.org/2006/time#Monday>)
ClassAssertion(:Example :endTime)
ClassAssertion(<http://www.w3.org/2006/time#Instant> :endTime)
DataPropertyAssertion(<http://www.w3.org/2006/time#inXSDDateTime> :endTime "2012-11-01T14:30:00"^^xsd:dateTime)
ClassAssertion(:Example :endWin)
ClassAssertion(<http://www.w3.org/2006/time#Instant> :endWin)
DataPropertyAssertion(<http://www.w3.org/2006/time#inXSDDateTime> :endWin "2012-11-23T17:00:00"^^xsd:dateTime)
ClassAssertion(:Example :inst0)
ClassAssertion(<http://www.w3.org/2006/time#Instant> :inst0)
DataPropertyAssertion(<http://www.w3.org/2006/time#inXSDDateTime> :inst0 "2012-11-20T00:00:00"^^xsd:dateTime)
ClassAssertion(:Example :inst1)
ClassAssertion(<http://www.w3.org/2006/time#Instant> :inst1)
DataPropertyAssertion(<http://www.w3.org/2006/time#inXSDDateTime> :inst1 "2012-11-20T12:00:00"^^xsd:dateTime)
ClassAssertion(:Example :inst2)
ClassAssertion(<http://www.w3.org/2006/time#Instant> :inst2)
DataPropertyAssertion(<http://www.w3.org/2006/time#inXSDDateTime> :inst2 "2012-11-20T15:00:00"^^xsd:dateTime)
ClassAssertion(:Example :inst3)
ClassAssertion(<http://www.w3.org/2006/time#Instant> :inst3)
DataPropertyAssertion(<http://www.w3.org/2006/time#inXSDDateTime> :inst3 "2012-11-20T17:00:00"^^xsd:dateTime)
ClassAssertion(:Example :inst4)
ClassAssertion(<http://www.w3.org/2006/time#Instant> :inst4)
DataPropertyAssertion(<http://www.w3.org/2006/time#inXSDDateTime> :inst4 "2012-11-20T19:30:00"^^xsd:dateTime)
ClassAssertion(:Example :inst5)
ClassAssertion(<http://www.w3.org/2006/time#Instant> :inst5)
DataPropertyAssertion(<http://www.w3.org/2006/time#inXSDDateTime> :inst5 "2012-11-20T23:59:59"^^xsd:dateTime)
ClassAssertion(:Example :maxDur)
ClassAssertion(<http://www.w3.org/2006/time#DurationDescription> :maxDur)
DataPropertyAssertion(<http://www.w3.org/2006/time#hours> :maxDur "3"^^xsd:nonNegativeInteger)
DataPropertyAssertion(<http://www.w3.org/2006/time#minutes> :maxDur "30"^^xsd:nonNegativeInteger)
ClassAssertion(<http://www.w3.org/2006/time#DurationDescription> :minDur)
DataPropertyAssertion(<http://www.w3.org/2006/time#hours> :minDur "2"^^xsd:nonNegativeInteger)
ClassAssertion(<http://www.w3.org/2006/time#DurationDescription> :prefDur)
DataPropertyAssertion(<http://www.w3.org/2006/time#hours> :prefDur "3"^^xsd:nonNegativeInteger)
ClassAssertion(:Example :startTime)
ClassAssertion(<http://www.w3.org/2006/time#Instant> :startTime)
DataPropertyAssertion(<http://www.w3.org/2006/time#inXSDDateTime> :startTime "2012-11-01T12:00:00"^^xsd:dateTime)
ClassAssertion(:Example :startWin)
ClassAssertion(<http://www.w3.org/2006/time#Instant> :startWin)
DataPropertyAssertion(<http://www.w3.org/2006/time#inXSDDateTime> :startWin "2012-11-19T09:00:00"^^xsd:dateTime)
ClassAssertion(meetings:TimeDescription :time_description1)
ClassAssertion(:Example :time_description1)
DataPropertyAssertion(<http://www.w3.org/2006/time#hour> :time_description1 "9"^^xsd:nonNegativeInteger)
ClassAssertion(meetings:TimeDescription :time_description2)
ClassAssertion(:Example :time_description2)
DataPropertyAssertion(<http://www.w3.org/2006/time#hour> :time_description2 "15"^^xsd:nonNegativeInteger)
DataPropertyAssertion(<http://www.w3.org/2006/time#minute> :time_description2 "30"^^xsd:nonNegativeInteger)
AnnotationAssertion(rdfs:comment :time_interval "Ένα παράδειγμα διαστήματος ωρών. Περιγράφει: 20:00 - 22:30"@el)
AnnotationAssertion(rdfs:comment :time_interval "A time interval example. Describes: 20:00 - 22:30"@en)
AnnotationAssertion(rdfs:label :time_interval "20:00 - 22:00")
ClassAssertion(:Example :time_interval)
ObjectPropertyAssertion(meetings:endsAt :time_interval :time_description2)
ObjectPropertyAssertion(meetings:startsAt :time_interval :time_description1)
ClassAssertion(meetings:ToBeArrangedMeeting :toBeArrangeMeeting)
ClassAssertion(:Example :toBeArrangeMeeting)
ObjectPropertyAssertion(meetings:hasEndTimeWindow :toBeArrangeMeeting :endWin)
ObjectPropertyAssertion(meetings:hasLocation :toBeArrangeMeeting meetings:NoLocation)
ObjectPropertyAssertion(meetings:hasMaxDuration :toBeArrangeMeeting :maxDur)
ObjectPropertyAssertion(meetings:hasMinDuration :toBeArrangeMeeting :minDur)
ObjectPropertyAssertion(meetings:hasParticipant :toBeArrangeMeeting :Nick)
ObjectPropertyAssertion(meetings:hasParticipant :toBeArrangeMeeting :John)
ObjectPropertyAssertion(meetings:hasParticipant :toBeArrangeMeeting :Marina)
ObjectPropertyAssertion(meetings:hasPreferredDuration :toBeArrangeMeeting :prefDur)
ObjectPropertyAssertion(meetings:hasStartTimeWindow :toBeArrangeMeeting :startWin)
DataPropertyAssertion(meetings:name :toBeArrangeMeeting "Progress report"^^xsd:string)
DataPropertyAssertion(meetings:topic :toBeArrangeMeeting "economic issues"^^xsd:string)
DataPropertyAssertion(meetings:topic :toBeArrangeMeeting "development issues"^^xsd:string)
ClassAssertion(meetings:TimeProgramOrganizer :tpOrganizer1)
ClassAssertion(:Example :tpOrganizer1)
ObjectPropertyAssertion(meetings:hasExcludedInterval :tpOrganizer1 :day_interval1)
ObjectPropertyAssertion(meetings:hasExcludedInterval :tpOrganizer1 :date_interval)
ObjectPropertyAssertion(meetings:hasPreferredinterval :tpOrganizer1 :combo_interval1)
ClassAssertion(meetings:Calendar :userCalendar)
ClassAssertion(:Example :userCalendar)
ObjectPropertyAssertion(meetings:hasEntry :userCalendar :calEntry4)
ObjectPropertyAssertion(meetings:hasEntry :userCalendar :calEntry3)
ObjectPropertyAssertion(meetings:hasEntry :userCalendar :calEntry5)
ObjectPropertyAssertion(meetings:hasEntry :userCalendar :calEntry2)
ObjectPropertyAssertion(meetings:hasEntry :userCalendar :calEntry1)
)